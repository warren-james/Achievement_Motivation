Distance_m = Distance * 0.46, # multiply by size of the slabs to get metres
Distance_ft = Distance_m  * 3.2808,
# define the Groups
Group = ifelse(Participant %% 2 == 0, "Best", "Performance"),
# Sorts the labelling so it matches across data frames
Participant = as.factor(Participant),
Hit = ifelse(Hit == "Yes", "True", "False")) %>%
# merge with expected accuracy dataframe
merge(df_exp_acc) %>%
# make a sensible label
rename(Expected_Acc = p)
setwd("E:/Github/Achievement_Motivation/OldVersion")
rm(list = ls())
#### Achievement Motivation ####
# This script produces plots and summaries for the Achievement Motivation study
#### library ####
# install.packages("tidyverse")
library(tidyverse)
#### load in data ####
# Accuracy estimation part
# load is used for files that were created in R
load("scratch/df_part1")
# Decision part
# read in a csv file
df_part2 <- read.csv("data/Decisions/Session 1 - Decisions.csv")
# load an R file
# load("scratch/df_exp_acc")
load("../scratch/newData/df_bayes_expAcc")
df_exp_acc <- df_exp_acc %>%
mutate(Distance_m = Distance * 0.46,
Distance_ft = Distance_m * 3.2808)
df_part2 %>% #%<>%
mutate(
# get absolute value for distance from target
Distance = abs(Distance - 20),
Distance_m = Distance * 0.46, # multiply by size of the slabs to get metres
Distance_ft = Distance_m  * 3.2808,
# define the Groups
Group = ifelse(Participant %% 2 == 0, "Best", "Performance"),
# Sorts the labelling so it matches across data frames
Participant = as.factor(Participant),
Hit = ifelse(Hit == "Yes", "True", "False")) %>%
# merge with expected accuracy dataframe
merge(df_exp_acc) %>%
# make a sensible label
rename(Expected_Acc = p)
head(df_part2)
df_part2 <- read_csv("../data/current/Session 1 - Decisions.csv", col_types = cols())
df_part2 %>% #%<>%
mutate(
# get absolute value for distance from target
Distance = abs(Distance - 20),
Distance_m = Distance * 0.46, # multiply by size of the slabs to get metres
Distance_ft = Distance_m  * 3.2808,
# define the Groups
Group = ifelse(Participant %% 2 == 0, "Best", "Performance"),
# Sorts the labelling so it matches across data frames
Participant = as.factor(Participant),
Hit = ifelse(Hit == "Yes", "True", "False")) %>%
# merge with expected accuracy dataframe
merge(df_exp_acc) %>%
# make a sensible label
rename(Expected_Acc = p)
df_part2 %<>%
mutate(
# get absolute value for distance from target
Distance = abs(Distance - 20),
Distance_m = Distance * 0.46, # multiply by size of the slabs to get metres
Distance_ft = Distance_m  * 3.2808,
# define the Groups
Group = ifelse(Participant %% 2 == 0, "Best", "Performance"),
# Sorts the labelling so it matches across data frames
Participant = as.factor(Participant),
Hit = ifelse(Hit == "Yes", "True", "False")) %>%
# merge with expected accuracy dataframe
merge(df_exp_acc) %>%
# make a sensible label
rename(Expected_Acc = p)
d_switch_line <- df_exp_acc %>%
# Group so we find values for each participant
group_by(Participant) %>%
# keep only the rows that are closest to 50% accuracy
filter(abs(p - .5) == min(abs(p - .5)))
head(d_switch_line)
plt_accuracy <- ggplot(data = df_part1,    # give it the data frame
aes(Distance, Acc)) # define the x and y axes
# now add the other details to the plt object we created
# add in dots to show raw accuracy over distance
plt_accuracy <- plt_accuracy + geom_point()
# add in a smoothed line based on a logistic regression
# the logistic regression was used to estimate accuracy for the distances we didn't test
plt_accuracy <- plt_accuracy + geom_smooth(data = df_exp_acc, # specify new data
aes(y = p),        # define the y axis
method = glm,      # setup the model part
method.args = list(family = binomial),
se = F)
# make a facet for each participant
plt_accuracy <- plt_accuracy + facet_wrap(~Participant)
# do some housekeeping to tidy up the plots
plt_accuracy <- plt_accuracy +
# relabel the axes to make sense
scale_y_continuous("Accuracy",
labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous("Distance from Target (slabs)",
limits = c(0,20)) +
# change the theme
theme_bw()
# show the plot
plt_accuracy
head(df_part1)
plt_decisions_trial <- ggplot(data = df_part2,
aes(x = Trial,
y = Distance)) # y can be changed between Distance and Expected_Acc
# add in our dots and line
plt_decisions_trial <- plt_decisions_trial +
geom_line() +
geom_point(aes(colour = Hit,
shape = Group))
# add dashed line to show where 50% was
plt_decisions_trial <- plt_decisions_trial + geom_hline(data = d_switch_line,
aes(yintercept = Distance),
linetype = "dashed")
# make facet for each participant
plt_decisions_trial <- plt_decisions_trial + facet_wrap(~Participant)
# tidy up a bit
plt_decisions_trial <- plt_decisions_trial +
# relabel the axes to make sense
scale_y_continuous("Distance from Target (slabs)") +
scale_x_continuous("Trial") +
theme_bw() +
theme(strip.text.x = element_text(size = 5,
margin = margin(.5,0,.5,0, "mm")))
# show plot
plt_decisions_trial
plt_decisions_trial +
# relabel the axes to make sense
scale_y_continuous("Distance from Target (slabs)") +
scale_x_continuous("Trial") +
theme_bw() +
theme(strip.text.x = element_text(size = 7,
margin = margin(.5,0,.5,0, "mm")))
plt_decisions_trial +
# relabel the axes to make sense
scale_y_continuous("Distance from Target (slabs)") +
scale_x_continuous("Trial") +
theme_bw() +
theme(strip.text.x = element_text(size = 10,
margin = margin(.5,0,.5,0, "mm")))
rm(list = ls())
setwd("E:/Github/Achievement_Motivation")
# This script reads in previous data from the accuracy
# measuring session. It then models the data to get some
# estimate for where the switch point is likely to be.
# Using this, we can estimate where people should have
# switched if we don't have their data.
#### Library ####
library(tidyverse)
library(tidybayes)
library(brms)
#### Functions ####
squash <- function(y, max, min, squash){
y <- y * ((max-squash) - (min + squash)) + (min + squash)
}
#### read data ####
# we have several experiments to read the data from
# so we'll do them one by one
#### > old Achievement Motivation ####
# df_AM <- read_csv("OldVersion/data/Accuracy/Session 2- Ability.csv", col_types = cols())
#
# # tidy up
# df_AM <- df_AM %>%
#   select(Participant, Distance, Total) %>%
#   mutate(inhoop = 12 - Total,
#          Acc = inhoop/12,
#          Participant = paste(Participant, "AM", sep ="")) %>%
#   select(-Total)
#### > Asymmetry ####
#### > > Awareness ####
df_aware <- read_csv("data/previous/Asym/Aware/Part1_session_data.csv", col_types = cols())
# tidy
df_aware <- df_aware %>%
select(-Direction) %>%
rename(Distance = Slab,
inhoop = Acc) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "aware", sep = ""))
#### > > Hoop size ####
# Might skip this one... but I could just ignore hoop size and then we'll get something
# that kind of works?
df_HS <- readxl::read_xlsx("data/previous/Asym/HoopSize/Part_1_measures.xlsx")
# tidy
df_HS <- df_HS %>%
select(-c(experimenter, direction, hoop_size)) %>%
rename(Participant = participant,
Distance = slab) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "HS", sep = ""))
#### > > Two Throw ####
df_TT <- read_csv("data/previous/Asym/TwoThrow/Part1_session_data.csv", col_types = cols())
# tidy
df_TT <- df_TT %>%
select(-Direcion) %>%
rename(Distance = Slab,
inhoop = Acc) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "TT", sep = ""))
#### > > Unequal ####
path <- c("data/previous/Asym/Unequal/")
results_files <- dir(path)
df_unequal <- tibble()
for(f in results_files){
d <- read_csv(paste(path, f, sep = ""), col_types = cols())
d$Participant <- strsplit(f, '[_]')[[1]][2]
d <- d %>%
rename(Distance = Slab,
inhoop = InHoop) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "TT", sep = "")) %>%
select(Participant, Distance, inhoop, Acc)
df_unequal <- rbind(df_unequal, d)
}
# tidy
rm(d, f, path, results_files)
#### > Athletes ####
path <- c("data/previous/Athletes/")
results_files <- dir(path)
df_athletes <- tibble()
for(f in results_files){
d <- read_csv(paste(path, f, sep = ""), col_types = cols())
d <- d %>%
select(-c(Direction, Athlete)) %>%
rename(Distance = Slab,
inhoop = Accuracy) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "ath", sep = ""))
df_athletes <- rbind(df_athletes, d)
}
# tidy
rm(d, f, path, results_files)
#### > Clarke and Hunt ####
df_CH <- read_csv("data/previous/ClarkeHunt/Part1_session_data_CH.csv", col_types = cols())
# tidy
df_CH <- df_CH %>%
select(-Direction) %>%
rename(Participant = `Subject Code`,
Distance = Slab,
inhoop = `Number in hoop`) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "CH", sep = ""))
#### > Non-Naive ####
df_NN <- read_csv("data/previous/NonNaive/Part_1.csv", col_types = cols())
# tidy
df_NN <- df_NN %>%
select(-Direction) %>%
rename(Distance = Slab,
inhoop = InHoop) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "NN", sep = ""))
#### > Misc ####
df_misc <- read_tsv("data/previous/Misc/Part1_session_data_Anca.txt", col_types = cols())
# tidy
df_misc <- df_misc %>%
select(-c(Direction, Session)) %>%
rename(inhoop = Accuracy) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "CH", sep = ""))
#### > Current AM data ####
df_AM <- read_csv("data/current/Session 2- Ability.csv", col_types = cols())
df_AM <- df_AM %>%
rename(inhoop = Total) %>%
mutate(inhoop = 12 - inhoop,
Acc = inhoop/12)
#### combine all data ####
df <- rbind(df_AM, df_athletes) %>%
rbind(df_aware) %>%
rbind(df_CH) %>%
rbind(df_HS) %>%
rbind(df_misc) %>%
rbind(df_NN) %>%
rbind(df_TT) %>%
rbind(df_unequal)
# tidy
rm(df_athletes, df_aware, df_CH, df_HS, df_misc, df_NN, df_TT, df_unequal)
# sort out the Acc column to not include 1 or 0
df <- df %>%
mutate(beta_Acc = squash(Acc, 1, 0, 1e-5))
# maybe we average some values since some people did throws in each direction?
# leave it for now... but it's something to think about
#### Initial plots ####
# make a plot to look at the overall trends in performance
df %>%
ggplot(aes(Distance, Acc)) +
# inidividual participants
geom_line(aes(fill = Participant),
stat = "smooth",
method = glm,
method.args = list(family = "binomial"),
alpha = .3,
fullrange = T) +
# overall
geom_smooth(method = glm,
method.args = list(family = "binomial"),
se = F,
linetype = "dashed",
size = 1.5) +
theme_bw() +
theme(legend.position = "none")
#### Model ####
#### > Priors ####
m_priors <- c(set_prior("student_t(3, 4, 3)",
class = "Intercept"),
set_prior("student_t(3, -10, 3)",
class = "b",
coef = "scaled_D"))
#### > Model ####
max_d <- max(df$Distance)
model_data <- df %>%
drop_na() %>%
mutate(scaled_D = Distance/max_d)
unique(model_data$Participant)
unique(df_AM$Participant)
length(unique(df_AM$Participant))
m <- brm(beta_Acc ~ scaled_D + (scaled_D|Participant),
data = model_data,
family = "beta",
prior = m_priors,
chains = 1,
cores = 1,
iter = 2000,
warmup = 1000)
save(m, file = "scratch/models/m")
df_part2 <- read_csv("data/current/Session 1 - Decisions.csv", col_types = cols())
df_preds <- tibble(Participant = rep(unique(df_part2$Participant), each = max_d + 1),
scaled_D = rep(seq(0, max_d, 1)/max_d, length(unique(df_part2$Participant))))
df_preds <- df_preds %>%
add_predicted_draws(m, allow_new_levels = T) %>%
mutate(Distance = scaled_D * max_d)
df_exp_acc <- df_preds %>%
group_by(Distance) %>%
mutate(mu = mean(.prediction)) %>%
group_by(Participant, Distance) %>%
summarise(mu_p = mean(.prediction),
mu = mean(mu))
df_exp_acc %>%
ggplot(aes(Distance, mu_p, group = Participant)) +
geom_path(alpha = .3) +
geom_path(colour = "blue",
aes(Distance, mu),
size = 1.5,
linetype = "dashed")
df_exp_acc <- df_exp_acc %>%
rename(p = mu_p) %>%
select(-mu)
df_exp_acc %>%
ggplot(aes(Distance, mu_p, group = Participant)) +
geom_path(alpha = .3) +
geom_path(colour = "blue",
aes(Distance, mu),
size = 1.5,
linetype = "dashed") +
theme_bw() +
scale_x_continuous("Estimated Accuracy")
df_exp_acc <- df_preds %>%
group_by(Distance) %>%
mutate(mu = mean(.prediction)) %>%
group_by(Participant, Distance) %>%
summarise(mu_p = mean(.prediction),
mu = mean(mu))
# Make a plot of this
df_exp_acc %>%
ggplot(aes(Distance, mu_p, group = Participant)) +
geom_path(alpha = .3) +
geom_path(colour = "blue",
aes(Distance, mu),
size = 1.5,
linetype = "dashed") +
theme_bw() +
scale_x_continuous("Estimated Accuracy")
# save this
df_exp_acc <- df_exp_acc %>%
rename(p = mu_p) %>%
select(-mu)
save(df_exp_acc,
file = "scratch/newData/df_bayes_expAcc")
setwd("E:/Github/Achievement_Motivation/OldVersion")
rm(list =ls())
load("scratch/df_part1")
df_part2 <- read_csv("../data/current/Session 1 - Decisions.csv", col_types = cols())
load("../scratch/newData/df_bayes_expAcc")
df_exp_acc <- df_exp_acc %>%
mutate(Distance_m = Distance * 0.46,
Distance_ft = Distance_m * 3.2808)
df_part2 %<>%
mutate(
# get absolute value for distance from target
Distance = abs(Distance - 20),
Distance_m = Distance * 0.46, # multiply by size of the slabs to get metres
Distance_ft = Distance_m  * 3.2808,
# define the Groups
Group = ifelse(Participant %% 2 == 0, "Best", "Performance"),
# Sorts the labelling so it matches across data frames
Participant = as.factor(Participant),
Hit = ifelse(Hit == "Yes", "True", "False")) %>%
# merge with expected accuracy dataframe
merge(df_exp_acc) %>%
# make a sensible label
rename(Expected_Acc = p)
# Find the point at which each participant was ~50% accuracte
d_switch_line <- df_exp_acc %>%
# Group so we find values for each participant
group_by(Participant) %>%
# keep only the rows that are closest to 50% accuracy
filter(abs(p - .5) == min(abs(p - .5)))
View(d_switch_line)
# load an R file
load("scratch/df_exp_acc")
df_exp_acc <- df_exp_acc %>%
mutate(Distance_m = Distance * 0.46,
Distance_ft = Distance_m * 3.2808)
d_line_freq <- df_exp_acc %>%
# Group so we find values for each participant
group_by(Participant) %>%
# keep only the rows that are closest to 50% accuracy
filter(abs(p - .5) == min(abs(p - .5)))
View(d_line_freq)
head(df_part1)
plt_accuracy <- ggplot(data = df_part1,    # give it the data frame
aes(Distance, Acc)) # define the x and y axes
# now add the other details to the plt object we created
# add in dots to show raw accuracy over distance
plt_accuracy <- plt_accuracy + geom_point()
plt_accuracy
plt_accuracy <- plt_accuracy + geom_smooth(data = df_exp_acc, # specify new data
aes(y = p),        # define the y axis
method = glm,      # setup the model part
method.args = list(family = binomial),
se = F)
plt_accuracy + facet_wrap(~Participant)
# load an R file
# load("scratch/df_exp_acc")
load("../scratch/newData/df_bayes_expAcc")
df_exp_acc <- df_exp_acc %>%
mutate(Distance_m = Distance * 0.46,
Distance_ft = Distance_m * 3.2808)
df_exp_acc <- df_exp_acc %>% filter(Participant %in% unique(df_part1$Participant))
head(df_exp)
head(df_exp_acc)
plt_accuracy <- ggplot(data = df_part1,    # give it the data frame
aes(Distance, Acc)) # define the x and y axes
# now add the other details to the plt object we created
# add in dots to show raw accuracy over distance
plt_accuracy <- plt_accuracy + geom_point()
# add in a smoothed line based on a logistic regression
# the logistic regression was used to estimate accuracy for the distances we didn't test
plt_accuracy <- plt_accuracy + geom_smooth(data = df_exp_acc, # specify new data
aes(y = p),        # define the y axis
method = glm,      # setup the model part
method.args = list(family = binomial),
se = F)
# make a facet for each participant
plt_accuracy <- plt_accuracy + facet_wrap(~Participant)
plt_accuracy
df_temp_exp <- df_exp_acc %>% filter(Participant %in% unique(df_part1$Participant))
plt_accuracy <- ggplot(data = df_part1,    # give it the data frame
aes(Distance, Acc)) # define the x and y axes
# now add the other details to the plt object we created
# add in dots to show raw accuracy over distance
plt_accuracy <- plt_accuracy + geom_point()
# add in a smoothed line based on a logistic regression
# the logistic regression was used to estimate accuracy for the distances we didn't test
plt_accuracy <- plt_accuracy + geom_smooth(data = df_temp_exp, # specify new data
aes(y = p),        # define the y axis
method = glm,      # setup the model part
method.args = list(family = binomial),
se = F)
# make a facet for each participant
plt_accuracy <- plt_accuracy + facet_wrap(~Participant)
# do some housekeeping to tidy up the plots
plt_accuracy <- plt_accuracy +
# relabel the axes to make sense
scale_y_continuous("Accuracy",
labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous("Distance from Target (slabs)",
limits = c(0,20)) +
# change the theme
theme_bw()
# show the plot
plt_accuracy
plt_decisions_trial <- ggplot(data = df_part2,
aes(x = Trial,
y = Distance)) # y can be changed between Distance and Expected_Acc
# add in our dots and line
plt_decisions_trial <- plt_decisions_trial +
geom_line() +
geom_point(aes(colour = Hit,
shape = Group))
# add dashed line to show where 50% was
plt_decisions_trial <- plt_decisions_trial + geom_hline(data = d_switch_line,
aes(yintercept = Distance),
linetype = "dashed")
# make facet for each participant
plt_decisions_trial <- plt_decisions_trial + facet_wrap(~Participant)
# tidy up a bit
plt_decisions_trial <- plt_decisions_trial +
# relabel the axes to make sense
scale_y_continuous("Distance from Target (slabs)") +
scale_x_continuous("Trial") +
theme_bw() +
theme(strip.text.x = element_text(size = 10,
margin = margin(.5,0,.5,0, "mm")))
# show plot
plt_decisions_trial
