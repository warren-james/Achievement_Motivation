Participant = paste(Participant, "TT", sep = ""))
#### > > Unequal ####
path <- c("data/previous/Asym/Unequal/")
results_files <- dir(path)
df_unequal <- tibble()
for(f in results_files){
d <- read_csv(paste(path, f, sep = ""), col_types = cols())
d$Participant <- strsplit(f, '[_]')[[1]][2]
d <- d %>%
rename(Distance = Slab,
inhoop = InHoop) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "TT", sep = "")) %>%
select(Participant, Distance, inhoop, Acc)
df_unequal <- rbind(df_unequal, d)
}
# tidy
rm(d, f, path, results_files)
#### > Athletes ####
path <- c("data/previous/Athletes/")
results_files <- dir(path)
df_athletes <- tibble()
for(f in results_files){
d <- read_csv(paste(path, f, sep = ""), col_types = cols())
d <- d %>%
select(-c(Direction, Athlete)) %>%
rename(Distance = Slab,
inhoop = Accuracy) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "ath", sep = ""))
df_athletes <- rbind(df_athletes, d)
}
# tidy
rm(d, f, path, results_files)
#### > Clarke and Hunt ####
df_CH <- read_csv("data/previous/ClarkeHunt/Part1_session_data_CH.csv", col_types = cols())
# tidy
df_CH <- df_CH %>%
select(-Direction) %>%
rename(Participant = `Subject Code`,
Distance = Slab,
inhoop = `Number in hoop`) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "CH", sep = ""))
#### > Non-Naive ####
df_NN <- read_csv("data/previous/NonNaive/Part_1.csv", col_types = cols())
# tidy
df_NN <- df_NN %>%
select(-Direction) %>%
rename(Distance = Slab,
inhoop = InHoop) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "NN", sep = ""))
#### > Misc ####
df_misc <- read_tsv("data/previous/Misc/Part1_session_data_Anca.txt", col_types = cols())
# tidy
df_misc <- df_misc %>%
select(-c(Direction, Session)) %>%
rename(inhoop = Accuracy) %>%
mutate(Acc = inhoop/12,
Participant = paste(Participant, "CH", sep = ""))
#### combine all data ####
df <- rbind(df_AM, df_athletes) %>%
rbind(df_aware) %>%
rbind(df_CH) %>%
rbind(df_HS) %>%
rbind(df_misc) %>%
rbind(df_NN) %>%
rbind(df_TT) %>%
rbind(df_unequal)
# tidy
rm(df_AM, df_athletes, df_aware, df_CH, df_HS, df_misc, df_NN, df_TT, df_unequal)
# sort out the Acc column to not include 1 or 0
df <- df %>%
mutate(beta_Acc = squash(Acc, 1, 0, 1e-5))
head(d)
head(df)
length(unique(df$Participant))
max_d <- max(df$Distance)
model_data <- df %>%
mutate(scaled_D = Distance/max_d)
load("scratch/models/m")
df_preds <- tibble(Participant = rep(unique(model_data$Participant), each = max_d),
scaled_D = rep(seq(1,max_d,1)/max_d, length(unique(model_data$Participant))))
df_preds <- df_preds %>%
add_predicted_draws(m) %>%
mutate(Distance = scaled_D * max_d)
test <- df_preds %>%
# create avg column
group_by(Distance) %>%
mutate(
mu = mean(.prediction),
# upper = HDInterval::hdi(.prediction)[2],
# lower = HDInterval::hdi(.prediction)[1]
) %>%
group_by(Participant, Distance) %>%
summarise(
mu_p = mean(.prediction),
mu = mean(mu),
# upper = mean(upper),
# lower = mean(lower)
)
test %>%
ggplot(aes(Distance, mu_p, group = Participant)) +
geom_path(alpha = .3,
aes(group = Participant)) +
geom_path(colour = "blue",
aes(Distance, mu),
size = 1.5,
linetype = "dashed")
View(test)
summary(m)
df %>%
ggplot(aes(Distance, Acc)) +
# inidividual participants
geom_line(aes(fill = Participant),
stat = "smooth",
method = glm,
method.args = list(family = "binomial"),
alpha = .3,
fullrange = T) +
# overall
geom_smooth(method = glm,
method.args = list(family = "binomial"),
se = F,
linetype = "dashed",
size = 1.5) +
theme_bw() +
theme(legend.position = "none")
25 * .467
25 * .46
rm(list = ls())
d_part1 <- read_csv("data/current/Session 2- Ability.csv")
head(d_part1)
View(d_part1)
d_part1 %>%
drop_na() %>%
mutate(Acc = 12 - Total)
d_part1 %>%
drop_na() %>%
mutate(inhoop = 12 - Total,
Acc = inhoop/12)
test <- d_part1 %>%
drop_na() %>%
mutate(inhoop = 12 - Total,
Acc = inhoop/12)
for(p in unique(test$Participant)){
print(p)
}
head(test)
ss <- test %>%
filter(Particiapnt == p)
ss <- test %>%
filter(Participant == p)
View(ss)
for(p in unique(test$Participant)){
ss <- test %>%
filter(Participant == p)
m <- glm(Acc ~ Distance,
family = "binomial",
data = ss)
}
slabs <- seq(0, 25, 1)
slabs
a <- predict(m, data(Distance = slabs), type = "response")
a <- predict(m, data(slabs), type = "response")
a <- predict(m, data.frame(Distance = slabs), type = "response")
a
setwd("E:/Github/Achievement_Motivation/OldVersion")
#### Sorting accuracy ####
# Sort out the accuracy data for Connor
#### Library ####
library(tidyverse)
#### load in data ####
df_part1 <- read.csv("data/Accuracy/Session 2- Ability.csv")
#### pre process ####
df_part1 <- df_part1 %>%
mutate(inhoop = 12 - Total,
Acc = inhoop/12,
Participant = as.factor(Participant))
# save
save(df_part1, file = "scratch/df_part1")
# quick plot
df_part1 %>%
ggplot(aes(Distance, Acc)) +
geom_point() +
geom_smooth(method = glm,
method.args = list(family = binomial),
se = F) +
scale_x_continuous(limits = c(0,20)) +
facet_wrap(~Participant)
# looks ok
#### Sort out Curves for each participant ####
# this version doesn't work so well...
# so maybe we should just do it by participant
# so we need a loop...
# m <- glm(Acc ~ Distance:Participant,
#          data = df_part1,
#          family = binomial)
#
# # now make a dataframe for predictions
# slabs <- seq(0,30,1)
# df_exp_acc <- tibble(Participant = rep(unique(df_part1$Participant), each = length(slabs)),
#                      Distance = rep(slabs, length(unique(df_part1$Participant)))) %>%
#   mutate(p = predict(m, data.frame(Distance = Distance, Participant = Participant), type = "response"))
#
# # looks good now so we can save this
# save(df_exp_acc, file = "scratch/df_exp_acc")
# setup df
df_exp_acc <- tibble(Participant = character(),
Distance = numeric(),
p = numeric())
# setup slabes to test
slabs <- seq(0,30,1)
# loop to add in data
for(subj in unique(df_part1$Participant)){
ss <- df_part1 %>% filter(Participant == subj)
m <- glm(Acc ~ Distance,
data = ss,
family = binomial)
df_exp_acc <- rbind(df_exp_acc, tibble(Participant = as.factor(rep(subj, length(slabs))),
Distance = slabs,
p = predict(m, data.frame(Distance = Distance), type = "response")))
}
# save
save(df_exp_acc, file = "scratch/df_exp_acc")
# plot this
df_part1 %>%
ggplot(aes(Distance, Acc)) +
geom_point() +
geom_smooth(data = df_exp_acc,
aes(y = p),
method = glm,
method.args = list(family = binomial),
se = F) +
scale_x_continuous(limits = c(0,20)) +
facet_wrap(~Participant)
rm(list = ls())
#### Plot Second part ####
# this is for Connor's experiment
# we'll be plotting their standing positions given the condition
# and probably by their expected accuracy from that location
#### Library ####
library(tidyverse)
#### load data ####
load("scratch/df_exp_acc")
#### read in new data ####
df_part2 <- read.csv("data/Decisions/Session 1 - Decisions.csv")
# pre process a bit
df_part2 <- df_part2 %>%
mutate(Participant = as.factor(Participant),
Distance = Position,
Distance = 20 - Distance,
# Hit = ifelse(Accuracy == "Yes", 1, 0),
Hit = as.factor(ifelse(Accuracy == "Yes", 1, 0)),
remove = as.numeric(Participant),
cond = ifelse(remove %% 2 == 0, "goal", "performance")) %>%
select(Participant, cond, Trial, Distance, Hit, - remove)
head(df_part2)
View(df_part2)
d <- read_csv("scratch/newData/temp.csv")
setwd("E:/Github/Achievement_Motivation")
d <- read_csv("scratch/newData/temp.csv")
head(d)
d2 <- read_csv("data/Decisions/Session 1 - Decisions.csv")
d2 <- read_csv("data/current/Session 1 - Decisions.csv")
head(d2)
d3 <- rbind(d, d2)
View(d3)
head(d)
d$temp
library(tidyverse)
rm(list ls())
rm(list = ls())
df_dec <- read_csv("OldVersion/data/Decisions/Session 1 - Decisions.csv")
head(df_dec)
check <- read_csv("OldVersion/data/Decisions/Warren Decision Data.csv")
head(check)
head(df_dec)
df_dec %>%
# rename the Posisition column
rename(Distance = Position)
df_dec %>%
# rename the Posisition column
rename(Distance = Position) %>%
# create new columns and tidy others
mutate(
Hit = as.factor(ifelse(Accuracy == "Yes", 1, 0)),
cond = ifelse(Participant %% 2 == 0, "goal", "performance"),
Participant = as.factor(Participant)
)
df_dec %>%
# rename the Posisition column
rename(Distance = Position) %>%
# create new columns and tidy others
mutate(
Hit = as.factor(ifelse(Accuracy == "Yes", 1, 0)),
cond = ifelse(Participant %% 2 == 0, "goal", "performance"),
Participant = as.factor(Participant)
) %>%
select(Participant, cond, Trial, Distance, Hit)
# process the data
df_dec <- df_dec %>%
# rename the Posisition column
rename(Distance = Position) %>%
# create new columns and tidy others
mutate(
Hit = as.factor(ifelse(Accuracy == "Yes", 1, 0)),
cond = ifelse(Participant %% 2 == 0, "goal", "performance"),
Participant = as.factor(Participant)
) %>%
select(Participant, cond, Trial, Distance, Hit)
df_dec %>%
ggplot(aes(Distance, Hit)) %>%
geom_smooth(method = glm,
method.args = list(family = "binomial"))
df_dec %>%
ggplot(aes(Distance, Hit)) +
geom_smooth(method = glm,
method.args = list(family = "binomial"))
range(df)
range(df_dec$Hit)
df_dec <- read_csv("OldVersion/data/Decisions/Session 1 - Decisions.csv")
# process the data
df_dec <- df_dec %>%
# rename the Posisition column
rename(Distance = Position) %>%
# create new columns and tidy others
mutate(
Hit = ifelse(Accuracy == "Yes", 1, 0),
cond = ifelse(Participant %% 2 == 0, "goal", "performance"),
Participant = as.factor(Participant)
) %>%
select(Participant, cond, Trial, Distance, Hit)
df_dec %>%
ggplot(aes(Distance, Hit)) +
geom_smooth(method = glm,
method.args = list(family = "binomial"))
View(df_dec)
write.csv("scratch/newData/ConnorFixed.csv")
write.csv(df_dec, file = "scratch/newData/ConnorFixed.csv")
df_acc <- read_csv("OldVersion/data/Accuracy/Session 2- Ability.csv")
head(df_acc)
source('~/.active-rstudio-document', echo=TRUE)
test <- read_csv("OldVersion/data/Accuracy/Warren Data Accuracy.xlsx")
df_acc <- read_csv("OldVersion/data/Accuracy/Session 2- Ability.csv")
rm(check)
rm(test)
df_acc %>%
select(-c(X4, X5))
df_acc %>%
select(-c(X4, X5)) %>%
mutate(
inhoop = 12 - Total,
Acc = inhoop/12,
Participant = as.factor(Participant)
)
write.csv(df_dec, file = "scratch/newData/ConnorFixed.csv", row.names = F)
df_acc_Con <- read_csv("OldVersion/data/Accuracy/Session 2- Ability.csv")
View(df_acc)
df_acc_Con %>%
mutate(inhoop = 12 - Total,
Acc = inhoop/12,
Participant = as.factor(Participant))
df_acc_Con <- read_csv("OldVersion/data/Accuracy/Session 2- Ability.csv")
df_acc_Con <- df_acc_Con %>%
# not sure where these columns are coming from...
select(-c(X4, X5)) %>%
mutate(inhoop = 12 - Total,
Acc = inhoop/12,
Participant = as.factor(Participant))
head(df_acc_Con)
rm(df_acc, df_dec)
df_acc_Xia <- read_csv("data/current/Session 2- Ability.csv")
head(df_acc_Xia)
df_acc_Xia %>%
filter(Participant > 11)
df_acc_Xia <- read_csv("data/current/Session 2- Ability.csv")
head(df_acc_Xia)
df_acc_Xia <- df_acc_Xia %>%
filter(Participant > 11)
View(df_acc_Xia)
df_acc_Xia <- read_csv("data/current/Session 2- Ability.csv")
# remove Connor participants for now
df_acc_Xia <- df_acc_Xia %>%
filter(Participant > 11) %>%
# remove participants with missing data
drop_na()
View(df_acc_Xia)
length(unique(df_acc_Xia$Participant))
df_acc <- rbind(df_acc_Con, df_acc_Xia)
#### read in data ####
df_acc_Con <- read_csv("OldVersion/data/Accuracy/Session 2- Ability.csv")
# remove weird columns
df_acc_Con <- df_acc_Con %>%
# not sure where these columns are coming from...
select(-c(X4, X5))
df_acc_Xia <- read_csv("data/current/Session 2- Ability.csv")
# remove Connor participants for now
df_acc_Xia <- df_acc_Xia %>%
filter(Participant > 11) %>%
# remove participants with missing data
drop_na()
df_acc <- rbind(df_acc_Con, df_acc_Xia)
head(df_acc)
df_acc <- rbind(df_acc_Con, df_acc_Xia) %>%
mutate(inhoop = 12 - Total,
Acc = inhoop/12,
Participant = as.factor(Participant))
head(df_acc)
View(df_acc_Xia)
df_acc %>%
ggplot(aes(Distance, Acc)) %>%
geom_smooth(method = glm,
method.args = list(family = "binomial"))
df_acc %>%
ggplot(aes(Distance, Acc)) +
geom_smooth(method = glm,
method.args = list(family = "binomial"))
m <- glm(Acc ~ Distance:Participant,
family = "binomial",
data = df_acc)
df_expacc <- tibble(Participant = rep(unique(df_acc$Participant), each = max(slabs)))
slabs <- seq(0, 25, 1)
df_expacc <- tibble(Participant = rep(unique(df_acc$Participant), each = max(slabs)))
length(unique(df_acc$Participant))
23 * 26
length(unique(df_acc$Participant)) * max(slabs)
df_expacc <- tibble(Participant = rep(unique(df_acc$Participant), each = length(slabs)),
Distance = rep(slabs, length(unique(df_acc$Participant))))
head(df_expacc)
summary(m)
df_expacc <- tibble(Participant = rep(unique(df_acc$Participant), each = length(slabs)),
Distance = rep(slabs, length(unique(df_acc$Participant))),
ExpAcc = predict(m, data.frame(Distance = Distance, Participant = Participant), type = "response"))
head(df_expacc)
df_expacc %>%
ggplot(aes(Distance, ExpAcc)) +
geom_path(aes(group = Participant),
alpha = .3)
save(df_acc, file = "scratch/newData/df_acc")
head(df_acc)
df_AM <- read_csv("OldVersion/data/Accuracy/Session 2- Ability.csv", col_types = cols())
# tidy up
df_AM <- df_AM %>%
select(Participant, Distance, Total) %>%
mutate(inhoop = 12 - Total,
Acc = inhoop/12,
Participant = paste(Participant, "AM", sep ="")) %>%
select(-Total)
head(df_AM)
#### Script to look at the Accuracy data ####
# This script will pull in all the acc data and fit some curves to see how people
# in this experiment did
#### library ####
library(tidyverse)
#### read in data ####
df_acc_Con <- read_csv("OldVersion/data/Accuracy/Session 2- Ability.csv")
# remove weird columns
df_acc_Con <- df_acc_Con %>%
# not sure where these columns are coming from...
select(-c(X4, X5))
df_acc_Xia <- read_csv("data/current/Session 2- Ability.csv")
# remove Connor participants for now
df_acc_Xia <- df_acc_Xia %>%
filter(Participant > 11) %>%
# remove participants with missing data
drop_na()
df_acc <- rbind(df_acc_Con, df_acc_Xia) %>%
mutate(inhoop = 12 - Total,
Acc = inhoop/12,
Participant = as.factor(Participant)) %>%
select(-Total)
# save this for later
save(df_acc, file = "scratch/newData/df_acc")
head(df_acc)
head(df_AM)
save(df_expacc, file = "scratch/newData/df_expacc")
df_exp_acc %>%
group_by(Participant) %>%
filter(abs(p - .5) == min(abs(p - .5))) %>%
mutate(p_sp = p) %>%
select(-p)
df_expacc %>%
group_by(Participant) %>%
filter(abs(p - .5) == min(abs(p - .5))) %>%
mutate(p_sp = p) %>%
select(-p)
head(df_expacc)
df_expacc %>%
group_by(Participant) %>%
filter(abs(ExpAcc - .5) == min(abs(ExpAcc - .5))) %>%
mutate(p_sp = ExpAcc) %>%
select(-ExpAcc)
#### get switch points ####
df_SP <- df_expacc %>%
group_by(Participant) %>%
filter(abs(ExpAcc - .5) == min(abs(ExpAcc - .5))) %>%
mutate(p_sp = ExpAcc) %>%
select(-ExpAcc)
df_SP %>%
ggplot(aes(Distance)) +
geom_boxplot()
df_SP %>%
ggplot(aes(Distance)) +
geom_histogram()
save(df_SP, file = "scratch/newData/df_SP")
df_acc %>%
ggplot(aes(Distance, Acc)) +
geom_smooth(method = glm,
method.args = list(family = "binomial")) +
facet_wrap(~Participant)
