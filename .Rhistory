if(as.numeric(g) %% 5 == 0){
y <- runif(length(x), -0.2, 0.0) + 0.2
} else {
y <- runif(length(x_2), -0.2, 0.0) + 0.2
}
for(g in groups){
if(as.numeric(g) %% 5 == 0){
y <- runif(length(x_2), -0.2, 0.0) + 0.2
} else {
y <- runif(length(x), -0.2, 0.0) + 0.2
}
}
groups <- c("1", "2", "3", "4", "5")
x <- seq(0.4, 0.9, 0.01)
x_2 <- c(0.45, 0.55, 0.8)
df <- data.frame()
for(g in groups){
if(as.numeric(g) %% 5 == 0){
y <- runif(length(x_2), -0.2, 0.0) + 0.2
} else {
y <- runif(length(x), -0.2, 0.0) + 0.2
}
df <- rbind(df, data.frame(group = g,
x = x,
y = y + x))
}
View(df)
df %>% ggplot(aes(x, y)) + geom_point() + geom_smooth + facet_wrap(~group)
library(tidyverse)
df %>% ggplot(aes(x, y)) + geom_point() + geom_smooth + facet_wrap(~group)
df %>% ggplot(aes(x, y)) + geom_point() + geom_smooth() + facet_wrap(~group)
df %>% ggplot(aes(x, y)) + geom_point() + geom_smooth(metho = "lm") + facet_wrap(~group)
groups <- c("1", "2", "3", "4", "5")
x <- seq(0.4, 0.9, 0.01)
x_2 <- c(0.45, 0.55, 0.8)
df <- data.frame()
for(g in groups){
if(as.numeric(g) %% 5 == 0){
x_vals <- x_2
} else {
x_vals <- x
}
y <- runif(length(x_vals), -0.2, 0.0) + 0.2
df <- rbind(df, data.frame(group = g,
x = x_vals,
y = y + x_vals))
}
df %>% ggplot(aes(x, y)) + geom_point() + geom_smooth(metho = "lm") + facet_wrap(~group)
df %>% ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm") +
facet_wrap(~group)
m <- runif(10, min = 0, max = 20)
sigmoid(m)
e1071::sigmoid(m)
??sigmoid
sigmoid = function(x) {
1 / (1 + exp(-x))
}
sigmoid(m)
m
sigmoid(m)
m
sigmoid(m)
m
m <- runif(20, min = 0, max = 90)
m
sigmoid(m)
cleaner_max = 19000
cleaner_avg = 16662
cleaner_min = 14665
carer_max = 17000
carer_avg = 21000
carer_min = 28840
hours = 40
days = 5
weeks = 52
temp <- tibble(job = rep("cleaner", "carer", each = 3),
value = rep("max", "avg", "min", 2))
library(tidyverse)
temp <- tibble(job = rep("cleaner", "carer", each = 3),
value = rep("max", "avg", "min", 2))
temp
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2))
head(temp)
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min))
head(temp)
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = salary_year/(hours * days * weeks))
head(temp)
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = ((salary_year/weeks)/days)/hours)
head(temp)
# wages
cleaner_max = 19000
cleaner_avg = 16662
cleaner_min = 14665
carer_max = 17000
carer_avg = 21000
carer_min = 28840
hours = 30
days = 5
weeks = 52
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = ((salary_year/weeks)/days)/hours)
head(temp)
# wages
cleaner_max = 19000
cleaner_avg = 16662
cleaner_min = 14665
carer_max = 17000
carer_avg = 21000
carer_min = 28840
hours = 20
days = 5
weeks = 52
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = ((salary_year/weeks)/days)/hours)
head(temp)
# wages
cleaner_max = 19000
cleaner_avg = 16662
cleaner_min = 14665
carer_max = 17000
carer_avg = 21000
carer_min = 28840
hours = 20
days = 5
weeks = 50
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = ((salary_year/weeks)/days)/hours)
head(temp)
# wages
cleaner_max = 19000
cleaner_avg = 16662
cleaner_min = 14665
carer_max = 17000
carer_avg = 21000
carer_min = 28840
hours = 10
days = 5
weeks = 50
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = ((salary_year/weeks)/days)/hours)
head(temp)
cleaner_max = 19000
cleaner_avg = 16662
cleaner_min = 14665
carer_max = 28840
carer_avg = 21000
carer_min = 17000
hours = 10
days = 5
weeks = 50
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = ((salary_year/weeks)/days)/hours)
head(temp)
# wages
cleaner_max = 19000
cleaner_avg = 16662
cleaner_min = 14665
carer_max = 28840
carer_avg = 21000
carer_min = 17000
hours = 10
days = 5
weeks = 50
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = (salary_year/(weeks * hours * days))
head(temp)
# wages
cleaner_max = 19000
cleaner_avg = 16662
cleaner_min = 14665
carer_max = 28840
carer_avg = 21000
carer_min = 17000
hours = 10
days = 5
weeks = 50
temp <- tibble(job = rep(c("cleaner", "carer"), each = 3),
value = rep(c("max", "avg", "min"), 2),
salary_year = c(cleaner_max,
cleaner_avg,
cleaner_min,
carer_max,
carer_avg,
carer_min)) %>%
mutate(hourly_rate = salary_year/(weeks * hours * days))
head(temp)
sqrt(128)
sqrt(5)
(1+sqrt(5))/2
(2+1.23608)/2
2/1.23608
library(brms)
brms::dstudent_t(seq(-3, 3, .1))
??dstudent_t
dstudent_t(seq(-3,3,.1),0,0,1)
dstudent_t(seq(-3,3,.1),10,0,1)
dstudent_t(seq(-3,3,.1),10,0,3)
boot::inv.logit(.3)
boot::inv.logit(.3)
logit(.333)
boot::logit(.333)
dstudent_t(seq(-3,3,.1),10,-.7,3)
dstudent_t(seq(-3,3,.1),1,-.7,3)
dstudent_t(seq(-3,3,.1),0,-.7,3)
dstudent_t(seq(-3,3,.1),20,-.7,3)
dstudent_t(seq(-3,3,.1),20,-.7,1)
dstudent_t(seq(-3,3,.1),20,-.7,.1)
dstudent_t(seq(-3,3,.1),20,-.7,10)
x <- seq(-3,3,.1)
prior = dstudent_t(x, 10, 0, 1)
plot(x, prior)
prior = dstudent_t(x, 10, -.7, 1)
plot(x, prior)
prior = dstudent_t(x, 10, -.7, 2)
plot(x, prior)
x <- seq(-4,4,.1)
prior = dstudent_t(x, 10, -.7, 2)
plot(x, prior)
prior = dstudent_t(x, 10, -.7, 3)
plot(x, prior)
prior = dstudent_t(x, 10, -.7, 4)
plot(x, prior)
prior = dstudent_t(x, 10, -.7, 5)
plot(x, prior)
prior = dstudent_t(x, 5, -.7, 3)
plot(x, prior)
prior = dstudent_t(x, 20, -.7, 3)
plot(x, prior)
boot::logit(4)
boot::logit(3.9)
plot(boot::inv.logit(x), prior)
prior = dstudent_t(x, 10, -.7, 3)
plot(boot::inv.logit(x), prior)
prior = dstudent_t(x, 10, -.7, 3)
plot(boot::inv.logit(x), prior)
prior = dstudent_t(x, 10, -.7, 3)
plot(boot::inv.logit(x), prior)
prior = dstudent_t(x, 10, -.7, 3)
plot(boot::inv.logit(x), prior)
prior = dstudent_t(x, 10, -.7, 2)
plot(boot::inv.logit(x), prior)
prior = dstudent_t(x, 10, -.7, 1)
plot(boot::inv.logit(x), prior)
prior = dstudent_t(x, 20, -.7, 1.5)
plot(boot::inv.logit(x), prior)
x <- seq(-4,4,.001)
prior = dstudent_t(x, 20, -.7, 1.5)
plot(boot::inv.logit(x), prior)
x <- seq(-4,4,.001)
prior = dstudent_t(x, 20, -.7, 4)
plot(boot::inv.logit(x), prior)
boot::inv.logit(4.1)
boot::inv.logit(5)
x <- seq(-5,5,.001)
prior = dstudent_t(x, 20, -.7, 4)
plot(boot::inv.logit(x), prior)
x <- seq(-6,6,.001)
prior = dstudent_t(x, 20, -.7, 4)
plot(boot::inv.logit(x), prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 20, -.7, 4)
plot(boot::inv.logit(x), prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 20, -.7, 4)
plot(x, prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 3, -.7, 4)
plot(x, prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 3, -.7, 1)
plot(x, prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 3, -.7, 2)
plot(x, prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 3, -.7, 2)
plot(boot::inv.logit(x), prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 3, -.7, 4)
plot(boot::inv.logit(x), prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 100, -.7, 4)
plot(boot::inv.logit(x), prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 3, -.7, 4)
plot(boot::inv.logit(x), prior)
x <- seq(-10,10,.001)
prior = dstudent_t(x, 3, 0, 4)
plot(boot::inv.logit(x), prior)
1 %% 10
10 %% 10
2 %% 10
0%10
0%%10
1 %% 5
1/120
library(tidyverse)
help(glm)
setwd("E:/Github/Achievement_Motivation")
#### Achievement Motivation ####
# This script produces plots and summaries for the Achievement Motivation study
#### library ####
# install.packages("tidyverse")
library(tidyverse)
#### load in data ####
# Accuracy estimation part
# load is used for files that were created in R
load("scratch/df_part1")
# Decision part
# read in a csv file
df_part2 <- read.csv("data/Decisions/Session 1 - Decisions.csv")
# load an R file
load("scratch/df_exp_acc")
df_exp_acc <- df_exp_acc %>%
mutate(Distance_m = Distance * 0.46,
Distance_ft = Distance_m * 3.2808)
#### Process data ####
# combine expected accuracy with decision data to get a measure of how likely particiapnts
# were to hit the target given their standing position
df_part2 %<>%
mutate(
# get absolute value for distance from target
Distance = abs(Position - 20),
Distance_m = Distance * 0.46, # multiply by size of the slabs to get metres
Distance_ft = Distance_m  * 3.2808,
# define the Groups
Group = ifelse(Participant %% 2 == 0, "Best", "Performance"),
# Sorts the labelling so it matches across data frames
Participant = as.factor(Participant),
Hit = ifelse(Accuracy == "Yes", "True", "False")) %>%
# merge with expected accuracy dataframe
merge(df_exp_acc) %>%
# make a sensible label
mutate(Expected_Acc = p) %>%
# remove bad label
select(-p, -Accuracy)
d_switch_line <- df_exp_acc %>%
# Group so we find values for each participant
group_by(Participant) %>%
# keep only the rows that are closest to 50% accuracy
filter(abs(p - .5) == min(abs(p - .5)))
plt_accuracy <- ggplot(data = df_part1,    # give it the data frame
aes(Distance, Acc)) # define the x and y axes
# now add the other details to the plt object we created
# add in dots to show raw accuracy over distance
plt_accuracy <- plt_accuracy + geom_point()
# add in a smoothed line based on a logistic regression
# the logistic regression was used to estimate accuracy for the distances we didn't test
plt_accuracy <- plt_accuracy + geom_smooth(data = df_exp_acc, # specify new data
aes(y = p),        # define the y axis
method = glm,      # setup the model part
method.args = list(family = binomial),
se = F)
# make a facet for each participant
plt_accuracy <- plt_accuracy + facet_wrap(~Participant)
# do some housekeeping to tidy up the plots
plt_accuracy <- plt_accuracy +
# relabel the axes to make sense
scale_y_continuous("Accuracy",
labels = scales::percent_format(accuracy = 1)) +
scale_x_continuous("Distance from Target (slabs)",
limits = c(0,20)) +
# change the theme
theme_bw()
# show the plot
plt_accuracy
plt_decisions_trial <- ggplot(data = df_part2,
aes(x = Trial,
y = Distance)) # y can be changed between Distance and Expected_Acc
# add in our dots and line
plt_decisions_trial <- plt_decisions_trial +
geom_line() +
geom_point(aes(colour = Hit,
shape = Group))
# add dashed line to show where 50% was
plt_decisions_trial <- plt_decisions_trial + geom_hline(data = d_switch_line,
aes(yintercept = Distance),
linetype = "dashed")
# make facet for each participant
plt_decisions_trial <- plt_decisions_trial + facet_wrap(~Participant)
# tidy up a bit
plt_decisions_trial <- plt_decisions_trial +
# relabel the axes to make sense
scale_y_continuous("Distance from Target (slabs)") +
scale_x_continuous("Trial") +
theme_bw()
# show plot
plt_decisions_trial
plt_hist <- ggplot(data = df_part2,
aes(Distance,
colour = Group,
fill = Group))
# add in bars
# the default is to stack the bars, but we don't want that here
# ignore the warnings... it's just saying you should define the binwidth
# but the default looks nice enough
plt_hist <- plt_hist + geom_histogram(position = "dodge")
# sort labes and tidy
plt_hist <- plt_hist +
theme_bw() +
scale_x_continuous("Distance from Target (slabs)")
# show the plot
plt_hist
head(df_part2)
plt_hist <- ggplot(data = df_part2,
aes(Expected_Acc,
colour = Group,
fill = Group))
# add in bars
# the default is to stack the bars, but we don't want that here
# ignore the warnings... it's just saying you should define the binwidth
# but the default looks nice enough
plt_hist <- plt_hist + geom_histogram(position = "dodge")
# sort labes and tidy
plt_hist <- plt_hist +
theme_bw() +
scale_x_continuous("Expected Accuracy from standing position", labels = scales::percent_format(accuracy = 1))
# show the plot
plt_hist
plt_hist <- ggplot(data = df_part2,
aes(Expected_Acc,
colour = Group,
fill = Group))
# add in bars
# the default is to stack the bars, but we don't want that here
# ignore the warnings... it's just saying you should define the binwidth
# but the default looks nice enough
plt_hist <- plt_hist + geom_histogram(position = "dodge")
# sort labes and tidy
plt_hist <- plt_hist +
theme_bw() +
scale_x_continuous("Expected Accuracy from standing position", labels = scales::percent_format(accuracy = 1))
# show the plot
plt_hist
# save this
ggsave(file = "scratch/plots/plt_hist_exp_acc.png",
width = 8,
height = 6)
1920/2
1920/2/15
1920/2/20
1920/2/30
0.09 + 1
((0.09 + 1)/2) * 255
